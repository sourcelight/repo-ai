{
	"info": {
		"_postman_id": "e0e9d94e-9d7a-49e3-b438-8a6c508b0fec",
		"name": "Social Media API",
		"description": "API for managing users and posts in the social media application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10079175",
		"_collection_link": "https://cloudy-rocket-983828.postman.co/workspace/AI-COURSE~22c41f05-1a60-49e8-9295-1602942fabc8/collection/10079175-e0e9d94e-9d7a-49e3-b438-8a6c508b0fec?action=share&source=collection_link&creator=10079175"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, title, body, likes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('body');",
									"    pm.expect(responseData).to.have.property('likes');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Body is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Likes should be an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.likes).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Sample Post\",\n  \"body\": \"This is the body of the sample post\",\n  \"author\": {\n    \"id\": 1\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "like Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, title, body, likes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('body');",
									"    pm.expect(responseData).to.have.property('likes');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Body is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Likes should be an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.likes).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "2"
						},
						"url": {
							"raw": "http://localhost:8080/api/posts/:postId/like",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"posts",
								":postId",
								"like"
							],
							"variable": [
								{
									"key": "postId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "unlike Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, title, body, likes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('title');",
									"    pm.expect(responseData).to.have.property('body');",
									"    pm.expect(responseData).to.have.property('likes');",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Body is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Likes should be an empty array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.likes).to.be.an('array').that.is.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "2"
						},
						"url": {
							"raw": "http://localhost:8080/api/posts/:postId/unlike",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"posts",
								":postId",
								"unlike"
							],
							"variable": [
								{
									"key": "postId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, title, body, and likes\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(post) {",
									"        pm.expect(post).to.have.property('id');",
									"        pm.expect(post).to.have.property('title');",
									"        pm.expect(post).to.have.property('body');",
									"        pm.expect(post).to.have.property('likes');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Title and body should be non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(post) {",
									"    pm.expect(post.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"    pm.expect(post.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Likes property is an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(post) {",
									"    pm.expect(post.likes).to.be.an('array');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/posts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"counter\")) {\r",
									"    pm.environment.set(\"counter\", 0);\r",
									"}\r",
									"\r",
									"// Set the number of iterations you want\r",
									"const iterations = 3;  // 4 iterations means 0, 1, 2, 3 (total 4 runs)\r",
									"\r",
									"// Get the current counter value\r",
									"let counter = parseInt(pm.environment.get(\"counter\"));\r",
									"\r",
									"\r",
									"// Assuming the current request body is a JSON string\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Parse the JSON string into an object\r",
									"let jsonData = JSON.parse(requestBody);\r",
									"\r",
									"// Modify the value of the \"city\" field\r",
									"jsonData.username = \"user\" + counter;\r",
									"\r",
									"// Convert the object back to a JSON string\r",
									"requestBody = JSON.stringify(jsonData);\r",
									"\r",
									"// Update the request body with the new JSON string\r",
									"pm.request.body.raw = requestBody;\r",
									"\r",
									"// Check if the counter is less than the iterations\r",
									"if (counter < iterations) {\r",
									"    console.log(\"counter= \" + counter);\r",
									"    console.log(\"iterations= \" + iterations);\r",
									"    // Increment the counter\r",
									"    counter++;\r",
									"    // Set the next request to the current request\r",
									"    pm.environment.set(\"counter\", counter);    \r",
									"    pm.execution.setNextRequest(pm.info.requestName);\r",
									"} else {\r",
									"    // Clear the counter when done\r",
									"    console.log(\"Final iteration reached. Clearing counter.\");\r",
									"    pm.environment.unset(\"counter\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"user\",\n  \"password\": \"password123\",\n  \"email\": \"sampleuser@example.com\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by Username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/users/:username",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "user0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/users/:userId/follow/:friendUserId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								":userId",
								"follow",
								":friendUserId"
							],
							"variable": [
								{
									"key": "userId",
									"value": ""
								},
								{
									"key": "friendUserId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow User",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/users/:userId/unfollow/:friendUserId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								":userId",
								"unfollow",
								":friendUserId"
							],
							"variable": [
								{
									"key": "userId",
									"value": ""
								},
								{
									"key": "friendUserId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}